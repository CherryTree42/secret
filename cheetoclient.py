from collections import Counter
from dataclasses import dataclass
from functools import cache, total_ordering
from itertools import product

from farkle_framework import POINTS, FarkleBot, BotDecision, TurnState, FarkleGame, WIN_SCORE

#Credit goes to pranav for this code
#You can't compete with a list of the very best moves
#GG!
@total_ordering
@dataclass(frozen=True)
class DiceRoll:
    counts: tuple[int, int, int, int, int, int]

    def __init__(self, roll):
        # A check, just in case I do something stupid
        if isinstance(roll, tuple) or isinstance(roll, list):
            # More checks! A dice roll should have no more than six dice,
            # and they should all range from 1 to 6
            assert len(roll) <= 6
            assert all(1 <= n <= 6 for n in roll)
            roll = Counter(roll)

        assert isinstance(roll, Counter)
        object.__setattr__(self, "counts", tuple(roll[i] for i in range(1, 7)))
        # Another check to ensure non-stupidity
        assert sum(self.counts) <= 6

    def to_counter(self):
        return Counter({i + 1: n for i, n in enumerate(self.counts)})

    def to_tuple(self):
        result = tuple()
        for i, n in enumerate(self.counts):
            result += (i + 1, ) * n
        return result

    def __lt__(self, other):
        assert isinstance(other, DiceRoll)
        return self.to_counter() < other.to_counter()

    def __add__(self, other):
        assert isinstance(other, DiceRoll)
        return DiceRoll(self.to_counter() + other.to_counter())

    def __sub__(self, other):
        assert isinstance(other, DiceRoll)
        if not other <= self:
            print(self, other)
        assert other <= self
        return DiceRoll(self.to_counter() - other.to_counter())

    def total(self): return sum(self.counts)

FACTOR = 50
new_points = {}
for k, v in POINTS.items():
    new_key = DiceRoll(k)
    new_value = v // FACTOR
    new_points[new_key] = new_value

POINTS = new_points

WIN_SCORE = 10000 // FACTOR
BANK_MINIMUM = 500 // FACTOR

S_r = {}  # Record<DiceRoll, [diceUsed: number, score: number][]>
# Dictionary to store all possible dice rolls for each number of dice (from 1 to 6)
POSSIBLE_ROLLS = {}

for num_dice in range(1, 7):
    # Generate all possible rolls with 'num_dice' dice, each ranging from 1 to 6
    possible_rolls = [DiceRoll(roll) for roll in product(range(1, 7), repeat=num_dice)]
    
    # Store the list of rolls in the dictionary
    POSSIBLE_ROLLS[num_dice] = possible_rolls


for n, rolls in POSSIBLE_ROLLS.items():  # n = 1,2,3,4,5,6 | rolls = every possible dice roll
    for r in rolls:
        if r in S_r:
            continue
        
        # Initialize a dictionary to store scoring combinations
        scorings = {i: [] for i in range(1, 7)}

        # Evaluate each scoring combination
        for comb, score in POINTS.items():
            if comb <= r:
                scorings[comb.total()].append((comb, score))
                
                if comb != r:
                    for sub_comb, sub_score in S_r[r - comb]:
                        new_comb = comb + sub_comb
                        new_score = score + sub_score
                        scorings[new_comb.total()].append((new_comb, new_score))

        # Keep only the highest-scoring combination for each total
        scorings = [
            max(scorings_for_n, key=lambda scoring: scoring[1])
            for scorings_for_n in scorings.values() if scorings_for_n
        ]

        S_r[r] = scorings


V_nt = {(1, 0): 3.825368408011267,
 (1, 1): 3.174816265020982,
 (1, 2): 2.525269411995205,
 (1, 3): 1.8504463339202282,
 (1, 4): 1.155058036152826,
 (1, 5): 0.450610567910263,
 (1, 6): -0.25572699526943143,
 (1, 7): -0.9600328951395882,
 (1, 8): -1.6613478925147191,
 (1, 9): -2.3599194933383787,
 (2, 0): 3.3833666521729615,
 (2, 1): 2.6461116789671126,
 (2, 2): 1.8910294772506324,
 (2, 3): 1.1244266793578683,
 (2, 4): 0.353565833804768,
 (2, 5): -0.4172399573812857,
 (2, 6): -1.1860925285322317,
 (2, 7): -1.9527150944984264,
 (2, 8): -2.038384646199983,
 (2, 9): -1.9685465333887588,
 (3, 0): 3.6388839678997473,
 (3, 1): 2.8638848117322606,
 (3, 2): 2.0822846089549065,
 (3, 3): 1.2990259990800341,
 (3, 4): 0.5168583699977702,
 (3, 5): -0.2633845373782364,
 (3, 6): -0.7210516764986536,
 (3, 7): -0.7837667232441108,
 (3, 8): -0.48217432731885346,
 (3, 9): -0.3271504982026201,
 (4, 0): 4.334145099765132,
 (4, 1): 3.574370998597029,
 (4, 2): 2.8428373346999587,
 (4, 3): 2.090974997401842,
 (4, 4): 1.5509950865553037,
 (4, 5): 1.3052511836020493,
 (4, 6): 1.4839899843839373,
 (4, 7): 1.649950282445472,
 (4, 8): 1.6886170021085345,
 (4, 9): 1.5889550534869272,
 (4, 10): 1.4289000935240814,
 (4, 11): 1.2689916934561438,
 (4, 12): 1.109139861422662,
 (4, 13): 0.949298858895876,
 (4, 14): 0.7894691099348634,
 (4, 15): 0.6296736838072778,
 (4, 16): 0.46991289139102577,
 (4, 17): 0.310178485031976,
 (4, 18): 0.15045897763646465,
 (5, 0): 5.66949672291675,
 (5, 1): 5.017762692701702,
 (5, 2): 4.513165157093568,
 (5, 3): 4.215928148293075,
 (5, 4): 4.288357018166234,
 (5, 5): 4.426261545192924,
 (5, 6): 4.462163874927734,
 (5, 7): 4.362527158598732,
 (5, 8): 4.216946731179997,
 (5, 9): 4.058914422468796,
 (5, 10): 3.900987874290477,
 (5, 11): 3.7509230405728253,
 (5, 12): 3.6216251735805365,
 (5, 13): 3.500773300057496,
 (5, 14): 3.3799623297396657,
 (5, 15): 3.2591852251295883,
 (5, 16): 3.138421753619017,
 (5, 17): 3.0188952354487917,
 (5, 18): 2.9203485261542,
 (5, 19): 2.841580585812384,
 (5, 20): 2.7628796691060096,
 (5, 21): 2.684243150634668,
 (5, 22): 2.60563670714469,
 (5, 23): 2.5270404902952706,
 (5, 24): 2.4484450549701435,
 (5, 25): 2.369856146485912,
 (5, 26): 2.2912879651310476,
 (5, 27): 2.212751546209237,
 (5, 28): 2.1342376980517983,
 (5, 29): 2.055735393338324,
 (5, 30): 1.9772537295089556,
 (5, 31): 1.8988038622094052,
 (5, 32): 1.8204016357134662,
 (5, 33): 1.7420722568745504,
 (5, 34): 1.6638112134324672,
 (5, 35): 1.585587463277598,
 (5, 36): 1.507377806718189,
 (5, 37): 1.4291710605781986,
 (5, 38): 1.3509697907245979,
 (5, 39): 1.2727869209376053,
 (5, 40): 1.1946325725592644,
 (5, 41): 1.1164985942929562,
 (5, 42): 1.0383748004706703,
 (5, 43): 0.9602692940395414,
 (5, 44): 0.8821922735753134,
 (5, 45): 0.8041461752327024,
 (5, 46): 0.7261362647458895,
 (5, 47): 0.6481649878053375,
 (5, 48): 0.5702217977593307,
 (5, 49): 0.49229119061576654,
 (5, 50): 0.4143629771129014,
 (5, 51): 0.3364346709984787,
 (5, 52): 0.2585063507637244,
 (5, 53): 0.18057801254033734,
 (5, 54): 0.10264965518481262,
 (5, 55): 0.024721259384534733,
 (6, 0): 10.203904379242177,
 (6, 1): 9.970187896469993,
 (6, 2): 9.982022551597613,
 (6, 3): 10.066875038528277,
 (6, 4): 10.08474143344295,
 (6, 5): 10.017936570078419,
 (6, 6): 9.912411646838535,
 (6, 7): 9.791251760623044,
 (6, 8): 9.674386267760369,
 (6, 9): 9.565416361402097,
 (6, 10): 9.466496283509585,
 (6, 11): 9.373986756460138,
 (6, 12): 9.283038887077762,
 (6, 13): 9.192260267388992,
 (6, 14): 9.101499206674976,
 (6, 15): 9.011243953751784,
 (6, 16): 8.935730564107558,
 (6, 17): 8.870851883663306,
 (6, 18): 8.808615031755469,
 (6, 19): 8.746438260325299,
 (6, 20): 8.684298542096961,
 (6, 21): 8.622175647160859,
 (6, 22): 8.560054693192573,
 (6, 23): 8.49793623705986,
 (6, 24): 8.436092950704833,
 (6, 25): 8.37466004823046,
 (6, 26): 8.313371317128485,
 (6, 27): 8.25209205284532,
 (6, 28): 8.193810681177133,
 (6, 29): 8.14286357155872,
 (6, 30): 8.091946970213343,
 (6, 31): 8.041077771623875,
 (6, 32): 7.990263945816302,
 (6, 33): 7.939488346589151,
 (6, 34): 7.888731851264822,
 (6, 35): 7.83798064373196,
 (6, 36): 7.787230944945378,
 (6, 37): 7.736490821005475,
 (6, 38): 7.685771536752377,
 (6, 39): 7.63506991423418,
 (6, 40): 7.584375202231698,
 (6, 41): 7.53828784509826,
 (6, 42): 7.498805578755835,
 (6, 43): 7.4614160786776225,
 (6, 44): 7.424047513461446,
 (6, 45): 7.386700269574,
 (6, 46): 7.3493735601673364,
 (6, 47): 7.312059999526639,
 (6, 48): 7.2747497876881795,
 (6, 49): 7.237439144572633,
 (6, 50): 7.20012807481406,
 (6, 51): 7.162814911482805,
 (6, 52): 7.1255015925022605,
 (6, 53): 7.088187982948128,
 (6, 54): 7.054981304738384,
 (6, 55): 7.027788276466957,
 (6, 56): 7.002502601784762,
 (6, 57): 6.977216666838295,
 (6, 58): 6.951930217230526,
 (6, 59): 6.926643018994909,
 (6, 60): 6.901355272162931,
 (6, 61): 6.8760598996693005,
 (6, 62): 6.850764520756641,
 (6, 63): 6.825469013894391,
 (6, 64): 6.80017514533219,
 (6, 65): 6.774881877105898,
 (6, 66): 6.749588325910366,
 (6, 67): 6.724294292180673,
 (6, 68): 6.6989990141712354,
 (6, 69): 6.673701320185899,
 (6, 70): 6.648401634777258,
 (6, 71): 6.623091147226617,
 (6, 72): 6.597780523434878,
 (6, 73): 6.572469680469794,
 (6, 74): 6.547162529718236,
 (6, 75): 6.521856663793244,
 (6, 76): 6.496550010133646,
 (6, 77): 6.471241450784376,
 (6, 78): 6.445930687354348,
 (6, 79): 6.420614375891006,
 (6, 80): 6.395294717156119,
 (6, 81): 6.369950855104051,
 (6, 82): 6.344605189282461,
 (6, 83): 6.319256060707133,
 (6, 84): 6.293923791053217,
 (6, 85): 6.2685995926413085,
 (6, 86): 6.243274260118753,
 (6, 87): 6.217947357108059,
 (6, 88): 6.192615990500968,
 (6, 89): 6.167278792087927,
 (6, 90): 6.141936609981457,
 (6, 91): 6.116509005150078,
 (6, 92): 6.091082487274633,
 (6, 93): 6.065656892155971,
 (6, 94): 6.040239751754015,
 (6, 95): 6.014824360370355,
 (6, 96): 5.9894061119996564,
 (6, 97): 5.963981708461446,
 (6, 98): 5.938545998270371,
 (6, 99): 5.913082373882915,
 (6, 100): 5.8875978288556325,
 (6, 101): 5.86203433770639,
 (6, 102): 5.836465779765831,
 (6, 103): 5.810889024579154,
 (6, 104): 5.785369812222498,
 (6, 105): 5.759875006674605,
 (6, 106): 5.73437255746812,
 (6, 107): 5.708850997185763,
 (6, 108): 5.683311326041718,
 (6, 109): 5.6577280387504345,
 (6, 110): 5.632123582215101,
 (6, 111): 5.606194282871613,
 (6, 112): 5.580247851164131,
 (6, 113): 5.554267244462636,
 (6, 114): 5.528461883097222,
 (6, 115): 5.502742873940363,
 (6, 116): 5.477017006787122,
 (6, 117): 5.451286757714129,
 (6, 118): 5.425520188992564,
 (6, 119): 5.399701005892908,
 (6, 120): 5.373825674049641,
 (6, 121): 5.347068553360856,
 (6, 122): 5.320331181048047,
 (6, 123): 5.29362242728223,
 (6, 124): 5.266909561178068,
 (6, 125): 5.240166045376327,
 (6, 126): 5.213389365232871,
 (6, 127): 5.186525830512352,
 (6, 128): 5.159562593034906,
 (6, 129): 5.132290044616781,
 (6, 130): 5.1048195014481905,
 (6, 131): 5.076882120218784,
 (6, 132): 5.048847462576532,
 (6, 133): 5.02064926731407,
 (6, 134): 4.993343746615494,
 (6, 135): 4.966462850044422,
 (6, 136): 4.939520750193111,
 (6, 137): 4.912431151683535,
 (6, 138): 4.885207400491538,
 (6, 139): 4.857711639016941,
 (6, 140): 4.83011719730078,
 (6, 141): 4.798096519328084,
 (6, 142): 4.765957541212515,
 (6, 143): 4.733561387427983,
 (6, 144): 4.70254798336228,
 (6, 145): 4.6722153716621335,
 (6, 146): 4.64183683040352,
 (6, 147): 4.611439200521232,
 (6, 148): 4.580713391046174,
 (6, 149): 4.54928636552998,
 (6, 150): 4.5171289158896,
 (6, 151): 4.477528053096279,
 (6, 152): 4.438075273778082,
 (6, 153): 4.398868015866896,
 (6, 154): 4.359614102682798,
 (6, 155): 4.319993324195792,
 (6, 156): 4.279908380386985,
 (6, 157): 4.238503829045698,
 (6, 158): 4.196158781307389,
 (6, 159): 4.150797158184872,
 (6, 160): 4.104138421579222,
 (6, 161): 4.051873682402231,
 (6, 162): 3.9981889069952956,
 (6, 163): 3.9420847112574506,
 (6, 164): 3.899844066882025,
 (6, 165): 3.8646860105685334,
 (6, 166): 3.8294194093394935,
 (6, 167): 3.7940988105319207,
 (6, 168): 3.758602246742271,
 (6, 169): 3.7229882876559373,
 (6, 170): 3.687197317292828,
 (6, 171): 3.588222778116574,
 (6, 172): 3.4894340093134133,
 (6, 173): 3.3905516679772347,
 (6, 174): 3.291555975934898,
 (6, 175): 3.1924151478243914,
 (6, 176): 3.093095729578579,
 (6, 177): 2.9938956155255028,
 (6, 178): 2.8923798984741325,
 (6, 179): 2.7805336325551764,
 (6, 180): 2.658192573646488,
 (6, 181): 2.520511037443441,
 (6, 182): 2.383111642449478,
 (6, 183): 2.2460059653846542,
 (6, 184): 2.107967535436643,
 (6, 185): 1.965164788988801,
 (6, 186): 1.8150720164609027,
 (6, 187): 1.6445473251028773,
 (6, 188): 1.4611625514403386,
 (6, 189): 1.2417695473251058,
 (6, 190): 1.0133744855966995,
 (6, 191): 0.7386831275720169,
 (6, 192): 0.44341563786008464,
 (6, 193): 0.1121399176954867}

def h(n): return 6 if n == 0 else n

class OwoFlux(FarkleBot):
    """
    A template for students to create their own Farkle bot.

    This bot should implement a strategy for playing Farkle by deciding
    which dice to keep and when to end a turn.
    """

    def make_decision(self, state: TurnState) -> BotDecision:
        """
        Make a decision based on the current game state

        Parameters:
        - state: TurnState object containing:
            - current_dice: List of current dice values [1-6]
            - remaining_dice: Number of dice left to roll
            - turn_score: Score accumulated this turn
            - banked_score: Your current banked score
            - opponent_score: Opponent's banked score

        Returns:
        - BotDecision object with:
            - dice_to_keep: List of dice values to keep
            - roll_again: Boolean indicating whether to roll again (True) or end turn (False)
        """

        current_score = state.turn_score // FACTOR
        scorings = S_r[DiceRoll(state.current_dice)]
        
        scorings_with_V = [
            (dice, score, V_nt.get((h(state.remaining_dice - dice.total()), current_score + score), 0))
            for dice, score in scorings
        ]
        # from pprint import pprint
        # pprint(scorings_with_V)

        best_scoring, t, V = max(scorings_with_V, key=lambda entry: entry[1] + entry[2])
        # print(best_scoring, t, V)

        return BotDecision(best_scoring.to_tuple(), V > 0)
